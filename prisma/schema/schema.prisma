// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
     id                  String              @id @default(uuid())
     name                String
     email               String              @unique
     password            String
     image               String?
     transaction         Transaction[]
     summary             Summary[]
     details             DetailSummary[]
     category            Category[]
     targetAmount        IncomeTarget?
     updatedAt           DateTime            @updatedAt
     createdAt           DateTime            @default(now())
}


model Category {
     id                  String              @id @default(uuid())
     name                String              @unique
     userId              String
     transaction         Transaction[]
     user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
     updatedAt           DateTime            @updatedAt
     createdAt           DateTime            @default(now())
}

model Transaction {
     id                  String              @id @default(uuid())
     title               String
     userId              String
     type                TransactionType
     categoryId          String
     amount              Int             
     note                String?
     transactionDate     DateTime
     user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
     category            Category            @relation(fields: [categoryId], references: [id])
     updatedAt           DateTime            @updatedAt
     createdAt           DateTime            @default(now())
     deletedAt           DateTime? 
     details             DetailSummary[]
}

model Summary {
    id            String          @id @default(uuid())
    userId        String
    user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    period        Period          // Enum untuk menentukan periode: Harian, Mingguan, Bulanan, Tahunan
    startDate     DateTime        // Tanggal mulai periode (misalnya, tanggal pertama bulan)
    endDate       DateTime        // Tanggal akhir periode (misalnya, tanggal terakhir bulan)
    totalIncome   Int
    totalExpense  Int
    balance       Int
    updatedAt     DateTime        @updatedAt
    createdAt     DateTime        @default(now())
    details       DetailSummary[]   
}


model DetailSummary {
    id              String           @id @default(uuid())
    summaryId       String
    transactionId   String
    userId          String
    updatedAt       DateTime         @updatedAt
    createdAt       DateTime         @default(now())

    summary         Summary          @relation(fields: [summaryId], references: [id], onDelete: Cascade)
    transaction     Transaction      @relation(fields: [transactionId], references: [id])
    user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    @@unique([summaryId, transactionId])
    @@index([userId, summaryId])
    @@index([transactionId])
}

model IncomeTarget {
    id              String           @id @default(uuid())
    dailyTarget     Int?
    weeklyTarget    Int?
    monthlyTarget   Int?
    yearlyTarget    Int?
    userId          String           @unique
    updatedAt       DateTime         @updatedAt
    createdAt       DateTime         @default(now())

    user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Period {
  DAILY     // Harian
  WEEKLY    // Mingguan
  MONTHLY   // Bulanan
  YEARLY    // Tahunan
}



enum TransactionType {
  INCOME
  EXPENSE
}

// model Post {
//      id            String        @id @default(uuid())
//      title         String
//      content       String
//      tags          PostTag[]
//      updatedAt     DateTime      @updatedAt
//      createdAt     DateTime      @default(now())
// }

// model Tag {
//      id            String        @id @default(uuid())
//      name          String
//      post          PostTag[]
//      updatedAt     DateTime      @updatedAt
//      createdAt     DateTime      @default(now())
// }
// model PostTag {
//      id        String        @id @default(uuid())
//      postId    String
//      tagId     String
//      post      Post      @relation(fields: [postId], references: [id])
//      tag       Tag       @relation(fields: [tagId], references: [id])
//      updatedAt     DateTime      @updatedAt
//      createdAt     DateTime      @default(now())
     
//      @@unique([postId, tagId]) 
// }







// ignore model below

// model Product {
//     id            String        @id @default(uuid())
//     slug          String        @unique
//     name          String        @unique
//     price         Float
//     sale          Boolean       @default(false)
//     availibility  Availibility
//     description   Description?
//     reviews       Review[]
//     tags          Tag[]
//     createdAt     DateTime      @default(now())
//     updatedAt     DateTime      @updatedAt
// }

// model Description {
//     id            String        @id @default(uuid())
//     content       String
//     product       Product       @relation(fields: [productId], references: [id])
//     productId     String        @unique
//     createdAt     DateTime      @default(now())
//     updatedAt     DateTime      @updatedAt
// }

// model Review {
//     id            String        @id @default(uuid())
//     title         String        
//     content       String
//     rating        Int
//     product       Product       @relation(fields: [productId], references: [id])
//     productId     String
//     createdAt     DateTime      @default(now())
//     updatedAt     DateTime      @updatedAt
// }

// model Tag {
//     id            String        @id @default(uuid())
//     content       String
//     products      Product[]
// }

// enum Availibility {
//     IN_STORE
//     ONLINE
// }